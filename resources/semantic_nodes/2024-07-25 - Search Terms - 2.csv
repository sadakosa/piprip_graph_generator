Keyword,lvl
Computation and Language,1
Formal Languages and Automata Theory,2
Formal Languages: Sets of strings formed from an alphabet according to specific syntactic rules.,3
Regular Languages: Can be recognized by finite automata.,4
Context-Free Languages: Can be generated by context-free grammars.,4
Automata Theory: The study of abstract machines and the problems they can solve.,3
Finite Automata: Abstract machines with a limited number of states.,4
Deterministic Finite Automata (DFA): Each state has exactly one transition for each input symbol.,5
"Nondeterministic Finite Automata (NFA): States can have zero, one, or multiple transitions for each input symbol.",5
"Practical Implementation: Python's re library for regular expressions, finite automata simulators in educational tools like JFLAP.",5
"Pushdown Automata: Machines with an additional stack storage, recognizing context-free languages.",4
"Practical Implementation: Parsing algorithms like CYK and Earley, implemented in tools such as ANTLR.",5
Turing Machines: Theoretical machines that can simulate any algorithm.,4
Universal Turing Machine: A Turing machine that can simulate any other Turing machine.,5
Practical Implementation: Simulation of Turing machines in educational environments like JFLAP.,5
Natural Language Processing (NLP),2
Syntax: Analysis of sentence structure and grammar rules.,3
Parsing Algorithms: Methods for analyzing syntactic structure.,4
CYK Algorithm: A dynamic programming algorithm for parsing context-free grammars.,5
Earley Parser: An algorithm for parsing ambiguous and complex grammars.,5
Practical Implementation: NLP libraries such as NLTK and SpaCy.,5
Semantics: Understanding and representing meaning in language.,3
Semantic Parsing: Converting natural language into formal representations.,4
Lambda Calculus: A formal system for expressing computation based on function abstraction and application.,5
Practical Implementation: Semantic parsers in libraries like AllenNLP.,5
Pragmatics: Contextual language understanding and use.,3
Morphology: Study of word formation and structure.,3
Stemming Algorithms: Reducing words to their base forms.,4
Porter Stemmer: A widely used algorithm for stemming English words.,5
Practical Implementation: Available in NLTK and SpaCy.,5
Named Entity Recognition (NER): Identifying and classifying entities in text.,3
Conditional Random Fields (CRFs): A probabilistic framework for labeling and segmenting sequential data.,4
"Practical Implementation: Implementations in libraries like NLTK, SpaCy, and Stanford NLP.",5
Sentiment Analysis: Determining the emotional tone of text.,3
VADER (Valence Aware Dictionary and sEntiment Reasoner): A lexicon and rule-based sentiment analysis tool.,4
Practical Implementation: Implementations in libraries like NLTK and Hugging Face's Transformers.,5
Algorithm Design and Analysis,2
Algorithms: Step-by-step procedures for solving problems.,3
String Matching Algorithms: Techniques for finding patterns within text.,4
Knuth-Morris-Pratt (KMP) Algorithm: An efficient string matching algorithm.,5
Boyer-Moore Algorithm: An algorithm that skips sections of text to find matches faster.,5
Practical Implementation: Available in Python's re library and custom implementations.,5
Parsing Algorithms: Methods for analyzing the syntactic structure of sentences.,3
"Practical Implementation: Libraries like NLTK, SpaCy, and Stanford NLP.",4
Machine Learning Algorithms: Approaches for training models on linguistic data.,3
Naive Bayes Classifier: A probabilistic classifier based on Bayes' theorem.,4
Support Vector Machines (SVMs): A supervised learning model for classification and regression.,4
Practical Implementation: Scikit-learn and TensorFlow.,5
Complexity Theory: Analysis of algorithm efficiency and resource usage.,3
Time Complexity: Measuring the execution time of algorithms.,4
Space Complexity: Measuring the memory usage of algorithms.,4
Practical Implementation: Analysis and optimization techniques in coding interviews and competitions.,5
Computational Models of Language,2
Language Models: Statistical and machine learning models predicting word sequences.,3
n-grams: Models using the probability of n-word sequences.,4
n-gram Smoothing Techniques: Methods to handle zero probabilities in n-gram models.,5
Practical Implementation: Implementations in NLTK and custom Python code.,5
Hidden Markov Models (HMMs): Probabilistic models for sequence data.,4
Practical Implementation: Libraries like hmmlearn and custom implementations.,5
Recurrent Neural Networks (RNNs): Models handling sequential data with memory.,4
Long Short-Term Memory (LSTM): A type of RNN capable of learning long-term dependencies.,5
Gated Recurrent Units (GRUs): A simplified version of LSTMs.,5
Practical Implementation: TensorFlow and PyTorch libraries.,5
Transformers: Advanced models using self-attention mechanisms for NLP tasks.,4
BERT (Bidirectional Encoder Representations from Transformers): A pre-trained transformer model for various NLP tasks.,5
GPT (Generative Pre-trained Transformer): Model for generating human-like text.,5
Practical Implementation: Hugging Face's Transformers library.,5
Information Retrieval,2
Search Engines: Systems for indexing and retrieving information based on queries.,3
TF-IDF (Term Frequency-Inverse Document Frequency): A statistical measure used to evaluate the importance of a word in a document.,4
BM25: A ranking function used by search engines to estimate the relevance of documents to a given search query.,4
Practical Implementation: Libraries like Whoosh and Elasticsearch.,5
Text Mining: Extracting useful patterns and information from text data.,3
Latent Dirichlet Allocation (LDA): A generative statistical model for topic modeling.,4
Practical Implementation: Libraries like Gensim.,5
Document Classification: Categorizing texts into predefined categories.,3
"k-Nearest Neighbors (k-NN): A simple, instance-based learning algorithm for classification.",4
Practical Implementation: Scikit-learn.,5
Recommender Systems: Suggesting relevant items based on user data and preferences.,3
Collaborative Filtering: Making automatic predictions about the interests of a user by collecting preferences from many users.,4
Practical Implementation: Libraries like Surprise and implicit.,5
Computational Semantics,2
Semantic Parsing: Converting natural language into formal representations.,3
Abstract Meaning Representation (AMR): A semantic representation for sentences.,4
Practical Implementation: AMR parsers in libraries like AllenNLP.,5
Ontologies: Structured frameworks representing knowledge and relationships.,3
OWL (Web Ontology Language): A language for defining and instantiating web ontologies.,4
Practical Implementation: Libraries like OWL API and Protégé.,5
Word Sense Disambiguation: Determining the meaning of a word in context.,3
Lesk Algorithm: An algorithm for word sense disambiguation using dictionary definitions.,4
Practical Implementation: Implementations in NLTK and custom Python code.,5
Distributional Semantics: Representing word meanings based on context and usage.,3
Word2Vec: A group of related models used to produce word embeddings.,4
Practical Implementation: Libraries like Gensim and TensorFlow.,5
Human-Computer Interaction (HCI) and Language,2
Dialogue Systems: Systems designed to interact with users through conversation.,3
Rule-Based Systems: Systems using predefined rules to generate responses.,4
End-to-End Systems: Systems that learn to generate responses from data.,4
Practical Implementation: Libraries like Rasa and Microsoft Bot Framework.,5
Chatbots: Automated programs simulating human conversation.,3
ELIZA: An early natural language processing computer program that simulates conversation.,4
GPT (Generative Pre-trained Transformer): A state-of-the-art model for generating human-like text.,4
Practical Implementation: Hugging Face's Transformers library.,5
Voice User Interfaces (VUIs): Interfaces controlled by voice commands.,3
Automatic Speech Recognition (ASR): Converting spoken language into text.,4
Text-to-Speech (TTS): Generating spoken language from text.,4
Practical Implementation: Libraries like Google Cloud Speech-to-Text and Text-to-Speech.,5
Artificial Intelligence and Language,2
Machine Learning: Techniques for learning patterns from linguistic data.,3
Supervised Learning: Training models on labeled datasets.,4
Unsupervised Learning: Identifying patterns in unlabeled data.,4
k-Means Clustering: A method for partitioning a set of observations into clusters.,5
Practical Implementation: Scikit-learn and TensorFlow.,5
Reinforcement Learning: Learning optimal actions through trial and error.,4
Q-Learning: A reinforcement learning algorithm for finding optimal actions.,5
Practical Implementation: Libraries like OpenAI Gym and TensorFlow.,5
Deep Learning: Neural network-based approaches for complex NLP tasks.,3
Convolutional Neural Networks (CNNs): Networks typically used for text classification.,4
Generative Adversarial Networks (GANs): Models generating realistic text data.,4
Practical Implementation: Libraries like TensorFlow and PyTorch.,5
Cognitive Science and Language,2
Psycholinguistics: Study of psychological processes underlying language use.,3
Sentence Processing Models: Theories on how humans understand sentences in real time.,4
Practical Implementation: Experimental design and analysis in psycholinguistics research.,5
Cognitive Models: Computational models of human language processing and acquisition.,3
ACT-R (Adaptive Control of Thought-Rational): A cognitive architecture for simulating human cognition.,4
Practical Implementation: Cognitive modeling tools and software.,5
Ethical and Social Implications,2
Bias and Fairness in NLP: Ensuring language technologies do not perpetuate biases.,3
Debiasing Algorithms: Techniques for reducing bias in machine learning models.,4
Practical Implementation: Tools and techniques for bias detection and mitigation in ML models.,5
Privacy: Safeguarding sensitive data in language processing applications.,3
Differential Privacy: A method to ensure the privacy of individual data points in datasets.,4
Practical Implementation: Libraries and frameworks supporting differential privacy.,5
Impact on Society: Examining the societal effects of language technologies on communication and employment.,3
Ethical AI Guidelines: Frameworks for developing and deploying AI responsibly.,4
Practical Implementation: Adoption of ethical AI principles and practices in development workflows.,5